{
"node_modules/browser-pack/_prelude.js":{"path":"node_modules/browser-pack/_prelude.js","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}},"fnMap":{"1":{"name":"(anonymous_1)","line":1,"loc":{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}}},"branchMap":{"1":{"line":1,"type":"if","locations":[{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":0},"end":{"line":null,"column":-1}}]}},"s":{"1":110},"b":{"1":[30,20]},"f":{"1":38},"code":"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","l":{"1":110}},
"src/ArcSpiral.ts":{"path":"src/ArcSpiral.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":48}},"3":{"start":{"line":14,"column":0},"end":{"line":92,"column":1}},"4":{"start":{"line":14,"column":34},"end":{"line":14,"column":47}},"5":{"start":{"line":21,"column":4},"end":{"line":24,"column":5}},"6":{"start":{"line":17,"column":12},"end":{"line":17,"column":28}},"7":{"start":{"line":18,"column":12},"end":{"line":18,"column":53}},"8":{"start":{"line":19,"column":12},"end":{"line":19,"column":53}},"9":{"start":{"line":26,"column":4},"end":{"line":34,"column":5}},"10":{"start":{"line":27,"column":8},"end":{"line":29,"column":37}},"11":{"start":{"line":31,"column":8},"end":{"line":31,"column":44}},"12":{"start":{"line":32,"column":8},"end":{"line":32,"column":64}},"13":{"start":{"line":32,"column":58},"end":{"line":32,"column":61}},"14":{"start":{"line":33,"column":8},"end":{"line":33,"column":64}},"15":{"start":{"line":33,"column":58},"end":{"line":33,"column":61}},"16":{"start":{"line":47,"column":11},"end":{"line":59,"column":5}},"17":{"start":{"line":48,"column":8},"end":{"line":48,"column":60}},"18":{"start":{"line":49,"column":8},"end":{"line":49,"column":38}},"19":{"start":{"line":50,"column":8},"end":{"line":50,"column":38}},"20":{"start":{"line":51,"column":8},"end":{"line":51,"column":40}},"21":{"start":{"line":52,"column":8},"end":{"line":58,"column":44}},"22":{"start":{"line":61,"column":11},"end":{"line":85,"column":5}},"23":{"start":{"line":63,"column":8},"end":{"line":65,"column":52}},"24":{"start":{"line":68,"column":8},"end":{"line":69,"column":53}},"25":{"start":{"line":71,"column":8},"end":{"line":71,"column":38}},"26":{"start":{"line":73,"column":8},"end":{"line":82,"column":9}},"27":{"start":{"line":74,"column":12},"end":{"line":74,"column":40}},"28":{"start":{"line":75,"column":12},"end":{"line":76,"column":67}},"29":{"start":{"line":77,"column":12},"end":{"line":81,"column":57}},"30":{"start":{"line":84,"column":8},"end":{"line":84,"column":20}},"31":{"start":{"line":87,"column":11},"end":{"line":91,"column":5}},"32":{"start":{"line":88,"column":8},"end":{"line":88,"column":44}},"33":{"start":{"line":89,"column":8},"end":{"line":89,"column":25}},"34":{"start":{"line":90,"column":8},"end":{"line":90,"column":29}},"35":{"start":{"line":92,"column":0},"end":{"line":92,"column":1}},"36":{"start":{"line":14,"column":13},"end":{"line":14,"column":22}}},"fnMap":{"1":{"name":"(anonymous_10)","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"ArcSpiral","line":21,"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":43}}},"3":{"name":"(anonymous_12)","line":26,"loc":{"start":{"line":26,"column":4},"end":{"line":26,"column":29}}},"4":{"name":"(anonymous_13)","line":32,"loc":{"start":{"line":32,"column":53},"end":{"line":32,"column":54}}},"5":{"name":"(anonymous_14)","line":33,"loc":{"start":{"line":33,"column":53},"end":{"line":33,"column":54}}},"6":{"name":"(anonymous_15)","line":47,"loc":{"start":{"line":47,"column":4},"end":{"line":47,"column":71}}},"7":{"name":"(anonymous_16)","line":61,"loc":{"start":{"line":61,"column":4},"end":{"line":null,"column":-1}}},"8":{"name":"(anonymous_17)","line":87,"loc":{"start":{"line":87,"column":4},"end":{"line":87,"column":27}}}},"branchMap":{"1":{"line":1,"type":"cond-expr","locations":[{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}}]},"2":{"line":22,"type":"binary-expr","locations":[{"start":{"line":22,"column":8},"end":{"line":22,"column":22}},{"start":{"line":22,"column":22},"end":{"line":24,"column":4}}]},"3":{"line":57,"type":"cond-expr","locations":[{"start":{"line":57,"column":18},"end":{"line":57,"column":42}},{"start":{"line":58,"column":18},"end":{"line":58,"column":42}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1,"32":0,"33":0,"34":0,"35":1,"36":1},"b":{"1":[1,0],"2":[0,0],"3":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"code":"import * as d3 from 'd3';\n\nimport { IHistogramOutput } from './basechart';\nimport { SpiralBase }       from './SpiralBase';\n\n// (used to be in spiral.ts, module Chart)\n\n/**\n * Charts data table as a filled curve on a spiral. We first create a histogram\n * of the data items, then plot the histogram as the thickness of a line (or\n * (filled curve). The number of points in the histogram is currently set by the\n * private member `n_points`.\n */\nexport class ArcSpiral<T> extends SpiralBase<T> {\n    private hist_data: IHistogramOutput[];\n    private hist_fn: d3.layout.Histogram<T>;\n    private n_points = 1000;\n    private hist_x = d3.scale.linear().range([0, 1]);\n    private hist_y = d3.scale.linear().range([0, 1]);\n\n    constructor (element: d3.Selection<any>) {\n        super(element);\n        // this.radial_map = d => 1;\n    }\n\n    public set data(data: T[]) {\n        this.hist_fn = d3.layout.histogram<T>()\n            .value(this.radial_map)\n            .bins(this.n_points + 1);\n\n        this.hist_data = this.hist_fn(data);\n        this.hist_x.domain(d3.extent(this.hist_data, a => a.x));\n        this.hist_y.domain(d3.extent(this.hist_data, a => a.y));\n    }\n\n    /**\n     * Return an arc segment given a range on the spiral scale and an inner\n     * and outer radius.\n     *\n     * @param x0 start of arc segment, in range [0, 1].\n     * @param x1 end of arc segment, in range [0, 1].\n     * @param r_inner inner radius, 0 is on axis, 1 on next winding, -1 on\n     *     previous winding.\n     * @param r_outer outer radius, same as `r_inner`.\n     * @return SGV path\n     */\n    public arc(x0: number, x1: number, r_inner: number, r_outer: number) {\n        const dr = this.period_fraction * this.radial_scale;\n        const p0 = this.get_polar(x0);\n        const p1 = this.get_polar(x1);\n        const r_mid = (p0.r + p1.r) / 2;\n        return d3.svg.arc()\n            .innerRadius(r_mid + dr * r_inner * 0.8)\n            .outerRadius(r_mid + dr * r_outer * 0.8)\n            .startAngle(p0.phi + 1 * Math.PI / 2)\n            .endAngle(p1.phi > p0.phi\n                ? p1.phi + 1 * Math.PI / 2\n                : p1.phi + 5 * Math.PI / 2);\n    }\n\n    public render(): d3.Selection<any> {\n        // create SVG\n        const svg = this.element.append('svg')\n                    .attr('height', this.chartHeight)\n                    .attr('width', this.chartWidth);\n\n        // transform to center\n        const plot = svg.append('g')\n            .attr('transform', 'translate(400 300)');\n\n        this.render_spiral_axis(plot);\n\n        for (let i = 0; i < this.n_points; i += 1) {\n            const d = this.hist_data[i];\n            const arc = this.arc(\n                this.hist_x(d.x), this.hist_x(d.x + d.dx), 0, 1.0);\n            plot.append('path')\n                .attr('class', 'arc')\n                .attr('d', arc)\n                .style('fill', 'red')\n                .style('fill-opacity', this.hist_y(d.y));\n        }\n\n        return plot;\n    }\n\n    public update(data: T[]): d3.Selection<any> {\n        this.element.select('svg').remove();\n        this.data = data;\n        return this.render();\n    }\n}\n","l":{"1":1,"4":1,"14":1,"17":0,"18":0,"19":0,"21":1,"26":1,"27":0,"31":0,"32":0,"33":0,"47":1,"48":0,"49":0,"50":0,"51":0,"52":0,"61":1,"63":0,"68":0,"71":0,"73":0,"74":0,"75":0,"77":0,"84":0,"87":1,"88":0,"89":0,"90":0,"92":1}},
"src/BubbleSpiral.ts":{"path":"src/BubbleSpiral.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":42}},"2":{"start":{"line":9,"column":0},"end":{"line":68,"column":1}},"3":{"start":{"line":9,"column":37},"end":{"line":9,"column":50}},"4":{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},"5":{"start":{"line":18,"column":11},"end":{"line":20,"column":5}},"6":{"start":{"line":19,"column":8},"end":{"line":19,"column":17}},"7":{"start":{"line":27,"column":11},"end":{"line":29,"column":5}},"8":{"start":{"line":28,"column":8},"end":{"line":28,"column":56}},"9":{"start":{"line":34,"column":11},"end":{"line":59,"column":5}},"10":{"start":{"line":34,"column":4},"end":{"line":59,"column":5}},"11":{"start":{"line":35,"column":8},"end":{"line":37,"column":52}},"12":{"start":{"line":39,"column":8},"end":{"line":40,"column":53}},"13":{"start":{"line":42,"column":8},"end":{"line":42,"column":38}},"14":{"start":{"line":44,"column":8},"end":{"line":47,"column":37}},"15":{"start":{"line":49,"column":8},"end":{"line":56,"column":41}},"16":{"start":{"line":50,"column":31},"end":{"line":50,"column":67}},"17":{"start":{"line":51,"column":31},"end":{"line":51,"column":67}},"18":{"start":{"line":52,"column":30},"end":{"line":52,"column":54}},"19":{"start":{"line":53,"column":51},"end":{"line":53,"column":68}},"20":{"start":{"line":53,"column":77},"end":{"line":53,"column":82}},"21":{"start":{"line":58,"column":8},"end":{"line":58,"column":20}},"22":{"start":{"line":64,"column":11},"end":{"line":67,"column":5}},"23":{"start":{"line":65,"column":8},"end":{"line":65,"column":44}},"24":{"start":{"line":66,"column":8},"end":{"line":66,"column":33}},"25":{"start":{"line":68,"column":0},"end":{"line":68,"column":1}},"26":{"start":{"line":9,"column":13},"end":{"line":9,"column":25}}},"fnMap":{"1":{"name":"(anonymous_21)","line":9,"loc":{"start":{"line":9,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"BubbleSpiral","line":10,"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":43}}},"3":{"name":"(anonymous_23)","line":18,"loc":{"start":{"line":18,"column":4},"end":{"line":18,"column":36}}},"4":{"name":"(anonymous_24)","line":27,"loc":{"start":{"line":27,"column":4},"end":{"line":27,"column":32}}},"5":{"name":"(anonymous_25)","line":34,"loc":{"start":{"line":34,"column":4},"end":{"line":34,"column":27}}},"6":{"name":"(anonymous_26)","line":50,"loc":{"start":{"line":50,"column":24},"end":{"line":50,"column":26}}},"7":{"name":"(anonymous_27)","line":51,"loc":{"start":{"line":51,"column":24},"end":{"line":51,"column":26}}},"8":{"name":"(anonymous_28)","line":52,"loc":{"start":{"line":52,"column":23},"end":{"line":52,"column":25}}},"9":{"name":"(anonymous_29)","line":53,"loc":{"start":{"line":53,"column":44},"end":{"line":53,"column":46}}},"10":{"name":"(anonymous_30)","line":53,"loc":{"start":{"line":53,"column":71},"end":{"line":53,"column":76}}},"11":{"name":"(anonymous_31)","line":64,"loc":{"start":{"line":64,"column":4},"end":{"line":64,"column":27}}}},"branchMap":{"1":{"line":11,"type":"binary-expr","locations":[{"start":{"line":11,"column":8},"end":{"line":11,"column":22}},{"start":{"line":11,"column":22},"end":{"line":null,"column":-1}}]},"2":{"line":53,"type":"cond-expr","locations":[{"start":{"line":53,"column":44},"end":{"line":53,"column":68}},{"start":{"line":53,"column":71},"end":{"line":53,"column":82}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":1,"26":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"code":"import { SpiralBase } from './SpiralBase';\nimport  * as d3 from 'd3';\n\n/**\n * Chart data using bubbles on  a spiral. Each entry in a table is visualised\n * as a bubble; size and color may be varied using the methods `radius_map`\n * and `color_map`.\n */\nexport class BubbleSpiral<T> extends SpiralBase<T> {\n    constructor (element: d3.Selection<any>) {\n        super(element);\n    }\n\n    /**\n     * Rescale the output of `weight_map` to create a decent size for the\n     * bubbles.\n     */\n    public bubble_scale_fn(x: number): number {\n        return x;\n    }\n\n    /**\n     * Scale the size of bubbles using this map. This defaults to using\n     * `weight_map` and scaling that using `bubble_scale_fn`. It is not\n     * recommended to change this function directly.\n     */\n    public bubble_scale_map(x: T): number {\n        return this.bubble_scale_fn(this.weight_map(x));\n    }\n\n    /**\n     * Render given data as bubbles.\n     */\n    public render(data: T[]): d3.Selection<any> {\n        const svg = this.element.append('svg')\n                    .attr('height', this.chartHeight)\n                    .attr('width', this.chartWidth);\n\n        const plot = svg.append('g')\n            .attr('transform', 'translate(400 300)');\n\n        this.render_spiral_axis(plot);\n\n        const bubble_groups = plot.append('g').selectAll('g.bubble')\n            .data(data)\n            .enter().append('g')\n            .attr('class', 'bubble');\n\n        bubble_groups.append('circle')\n            .attr('cx', (d) => this.get_polar(this.radial_map(d)).x)\n            .attr('cy', (d) => this.get_polar(this.radial_map(d)).y)\n            .attr('r', (d) => this.bubble_scale_map(d))\n            .style('fill', this.color_map ? (d) => this.color_map(d) : () => 'red')\n            .style('fill-opacity', 0.5)\n            .style('stroke', 'black')\n            .style('stroke-width', 0.05);\n\n        return plot;\n    }\n\n    /**\n     * Update the view. Currently clears the SVG and rerenders everything.\n     */\n    public update(data: T[]): d3.Selection<any> {\n        this.element.select('svg').remove();\n        return this.render(data);\n    }\n}\n","l":{"1":1,"9":1,"10":1,"18":1,"19":0,"27":1,"28":0,"34":1,"35":0,"39":0,"42":0,"44":0,"49":0,"50":0,"51":0,"52":0,"53":0,"58":0,"64":1,"65":0,"66":0,"68":1}},
"src/Complex.ts":{"path":"src/Complex.ts","statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":95,"column":1}},"2":{"start":{"line":25,"column":4},"end":{"line":28,"column":5}},"3":{"start":{"line":26,"column":8},"end":{"line":26,"column":25}},"4":{"start":{"line":27,"column":8},"end":{"line":27,"column":25}},"5":{"start":{"line":9,"column":11},"end":{"line":12,"column":5}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":43}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":71}},"8":{"start":{"line":18,"column":11},"end":{"line":20,"column":5}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"11":{"start":{"line":34,"column":8},"end":{"line":34,"column":50}},"12":{"start":{"line":40,"column":11},"end":{"line":42,"column":5}},"13":{"start":{"line":41,"column":8},"end":{"line":41,"column":61}},"14":{"start":{"line":47,"column":11},"end":{"line":49,"column":5}},"15":{"start":{"line":48,"column":8},"end":{"line":48,"column":72}},"16":{"start":{"line":54,"column":11},"end":{"line":57,"column":5}},"17":{"start":{"line":55,"column":8},"end":{"line":55,"column":39}},"18":{"start":{"line":56,"column":8},"end":{"line":56,"column":58}},"19":{"start":{"line":64,"column":11},"end":{"line":69,"column":5}},"20":{"start":{"line":65,"column":8},"end":{"line":68,"column":10}},"21":{"start":{"line":74,"column":11},"end":{"line":76,"column":5}},"22":{"start":{"line":75,"column":8},"end":{"line":75,"column":57}},"23":{"start":{"line":81,"column":11},"end":{"line":85,"column":5}},"24":{"start":{"line":82,"column":8},"end":{"line":84,"column":10}},"25":{"start":{"line":90,"column":11},"end":{"line":94,"column":5}},"26":{"start":{"line":91,"column":8},"end":{"line":93,"column":10}},"27":{"start":{"line":95,"column":0},"end":{"line":95,"column":1}},"28":{"start":{"line":4,"column":13},"end":{"line":4,"column":20}}},"fnMap":{"1":{"name":"(anonymous_33)","line":4,"loc":{"start":{"line":4,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"Complex","line":25,"loc":{"start":{"line":25,"column":4},"end":{"line":25,"column":43}}},"3":{"name":"(anonymous_35)","line":9,"loc":{"start":{"line":9,"column":4},"end":{"line":9,"column":25}}},"4":{"name":"(anonymous_36)","line":18,"loc":{"start":{"line":18,"column":4},"end":{"line":18,"column":25}}},"5":{"name":"(anonymous_37)","line":33,"loc":{"start":{"line":33,"column":4},"end":{"line":null,"column":-1}}},"6":{"name":"(anonymous_38)","line":40,"loc":{"start":{"line":40,"column":4},"end":{"line":null,"column":-1}}},"7":{"name":"(anonymous_39)","line":47,"loc":{"start":{"line":47,"column":4},"end":{"line":null,"column":-1}}},"8":{"name":"(anonymous_40)","line":54,"loc":{"start":{"line":54,"column":4},"end":{"line":null,"column":-1}}},"9":{"name":"(anonymous_41)","line":64,"loc":{"start":{"line":64,"column":4},"end":{"line":64,"column":27}}},"10":{"name":"(anonymous_42)","line":74,"loc":{"start":{"line":74,"column":4},"end":{"line":74,"column":31}}},"11":{"name":"(anonymous_43)","line":81,"loc":{"start":{"line":81,"column":4},"end":{"line":81,"column":26}}},"12":{"name":"(anonymous_44)","line":90,"loc":{"start":{"line":90,"column":4},"end":{"line":90,"column":27}}}},"branchMap":{},"s":{"1":1,"2":1,"3":13834,"4":13834,"5":1,"6":0,"7":0,"8":1,"9":3076,"10":1,"11":512,"12":1,"13":0,"14":1,"15":0,"16":1,"17":0,"18":0,"19":1,"20":3073,"21":1,"22":256,"23":1,"24":3072,"25":1,"26":3072,"27":1,"28":1},"b":{},"f":{"1":1,"2":13834,"3":0,"4":3076,"5":512,"6":0,"7":0,"8":0,"9":3073,"10":256,"11":3072,"12":3072},"code":"/**\n * Complex number class\n */\nexport class Complex {\n    /**\n     * @param a complex number\n     * @returns exp(a + ib) -> exp(a) (cos(b) + i sin(b))\n     */\n    static EXP(a: Complex): Complex {\n        const s: number = Math.exp(a.real);\n        return new Complex(s * Math.cos(a.imag), s * Math.sin(a.imag));\n    }\n\n    /**\n     * @param a real number\n     * @returns exp(ia)\n     */\n    static EXPI(a: number): Complex {\n        return new Complex(Math.cos(a), Math.sin(a));\n    }\n\n    public real: number;\n    public imag: number;\n\n    constructor (real: number, imag: number) {\n        this.real = real;\n        this.imag = imag;\n    }\n\n    /**\n     * @returns the complex conjugate: (a + ib) -> (a - ib)\n     */\n    get conjugate(): Complex {\n        return new Complex(this.real, -this.imag);\n    }\n\n    /**\n     * @returns the square function: (a + ib) -> a^2 - b^2\n     */\n    public square(): number {\n        return this.real * this.real - this.imag * this.imag;\n    }\n\n    /**\n     * @returns the length square: (a + ib) -> a^2 + b^2\n     */\n    public norm2(): number {\n        return Math.sqrt(this.real * this.real + this.imag * this.imag);\n    }\n\n    /**\n     * @returns inverse number: x -> y such that x y == 1\n     */\n    public inverse(): Complex {\n        const s: number = this.norm2();\n        return new Complex(this.real / s, -this.imag / s);\n    }\n\n    /**\n     * @param a other complex number.\n     * @returns complex multiple: (a + ib) * (c + id)\n     *    -> (a c - b d + i(a d + b c))\n     */\n    public times(a: Complex): Complex {\n        return new Complex(\n            this.real * a.real - this.imag * a.imag,\n            this.imag * a.real + this.real * a.imag\n        );\n    }\n\n    /**\n     * @returns multiple by real number: (a + ib) c -> (a c + i b c)\n     */\n    public times_real(a: number): Complex {\n        return new Complex(this.real * a, this.imag * a);\n    }\n\n    /**\n     * @returns complex sum: (a + ib) + (c + id) -> (a+c + i(b+d))\n     */\n    public plus(a: Complex): Complex {\n        return new Complex(\n            this.real + a.real, this.imag + a.imag\n        );\n    }\n\n    /**\n     * @returns complex difference: (a + ib) - (c + id) -> (a-c + i(b-d))\n     */\n    public minus(a: Complex): Complex {\n        return new Complex(\n            this.real - a.real, this.imag - a.imag\n        );\n    }\n}\n","l":{"4":1,"9":1,"10":0,"11":0,"18":1,"19":3076,"25":1,"26":13834,"27":13834,"33":1,"34":512,"40":1,"41":0,"47":1,"48":0,"54":1,"55":0,"56":0,"64":1,"65":3073,"74":1,"75":256,"81":1,"82":3072,"90":1,"91":3072,"95":1}},
"src/LineChart.ts":{"path":"src/LineChart.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":42}},"3":{"start":{"line":7,"column":0},"end":{"line":56,"column":1}},"4":{"start":{"line":7,"column":31},"end":{"line":7,"column":48}},"5":{"start":{"line":10,"column":4},"end":{"line":13,"column":5}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":65}},"7":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":70}},"9":{"start":{"line":18,"column":4},"end":{"line":20,"column":5}},"10":{"start":{"line":19,"column":8},"end":{"line":19,"column":71}},"11":{"start":{"line":22,"column":11},"end":{"line":55,"column":5}},"12":{"start":{"line":23,"column":8},"end":{"line":23,"column":59}},"13":{"start":{"line":24,"column":8},"end":{"line":24,"column":60}},"14":{"start":{"line":25,"column":8},"end":{"line":25,"column":62}},"15":{"start":{"line":26,"column":8},"end":{"line":26,"column":60}},"16":{"start":{"line":27,"column":8},"end":{"line":31,"column":94}},"17":{"start":{"line":33,"column":8},"end":{"line":33,"column":44}},"18":{"start":{"line":33,"column":38},"end":{"line":33,"column":41}},"19":{"start":{"line":34,"column":8},"end":{"line":34,"column":44}},"20":{"start":{"line":34,"column":38},"end":{"line":34,"column":41}},"21":{"start":{"line":36,"column":8},"end":{"line":38,"column":28}},"22":{"start":{"line":37,"column":20},"end":{"line":37,"column":26}},"23":{"start":{"line":38,"column":20},"end":{"line":38,"column":26}},"24":{"start":{"line":40,"column":8},"end":{"line":43,"column":25}},"25":{"start":{"line":45,"column":8},"end":{"line":47,"column":25}},"26":{"start":{"line":49,"column":8},"end":{"line":52,"column":29}},"27":{"start":{"line":54,"column":8},"end":{"line":54,"column":19}},"28":{"start":{"line":56,"column":0},"end":{"line":56,"column":1}},"29":{"start":{"line":7,"column":13},"end":{"line":7,"column":22}}},"fnMap":{"1":{"name":"(anonymous_49)","line":7,"loc":{"start":{"line":7,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"LineChart","line":10,"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":43}}},"3":{"name":"(anonymous_51)","line":15,"loc":{"start":{"line":15,"column":4},"end":{"line":null,"column":-1}}},"4":{"name":"(anonymous_52)","line":18,"loc":{"start":{"line":18,"column":4},"end":{"line":null,"column":-1}}},"5":{"name":"(anonymous_53)","line":22,"loc":{"start":{"line":22,"column":4},"end":{"line":22,"column":37}}},"6":{"name":"(anonymous_54)","line":33,"loc":{"start":{"line":33,"column":33},"end":{"line":33,"column":34}}},"7":{"name":"(anonymous_55)","line":34,"loc":{"start":{"line":34,"column":33},"end":{"line":34,"column":34}}},"8":{"name":"(anonymous_56)","line":37,"loc":{"start":{"line":37,"column":15},"end":{"line":37,"column":16}}},"9":{"name":"(anonymous_57)","line":38,"loc":{"start":{"line":38,"column":15},"end":{"line":38,"column":16}}}},"branchMap":{"1":{"line":1,"type":"cond-expr","locations":[{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}}]},"2":{"line":11,"type":"binary-expr","locations":[{"start":{"line":11,"column":8},"end":{"line":11,"column":22}},{"start":{"line":11,"column":22},"end":{"line":13,"column":4}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":1,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":1},"b":{"1":[1,0],"2":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"code":"import * as d3 from 'd3';\n\nimport { Base }        from './basechart';\nimport { ICoordinate } from './basechart';\nimport { IMargin }     from './basechart';\n\nexport class LineChart extends Base<ICoordinate> {\n    public margin: IMargin;\n\n    constructor (element: d3.Selection<any>) {\n        super(element);\n        this.margin = {top: 20, right: 20, bottom: 30, left: 50};\n    }\n\n    public get width(): number {\n        return this.chartWidth - this.margin.left - this.margin.right;\n    }\n    public get height(): number {\n        return this.chartHeight - this.margin.top - this.margin.bottom;\n    }\n\n    public render(data: ICoordinate[]): d3.Selection<any> {\n        const x = d3.scale.linear().range([0, this.width]);\n        const y = d3.scale.linear().range([this.height, 0]);\n        const xAxis = d3.svg.axis().scale(x).orient('bottom');\n        const yAxis = d3.svg.axis().scale(y).orient('left');\n        const svg = this.element.append('svg')\n            .attr('width', this.chartWidth)\n            .attr('height', this.chartHeight)\n            .append('g')\n            .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')');\n\n        x.domain(d3.extent(data, a => a.x));\n        y.domain(d3.extent(data, a => a.y));\n\n        const line = d3.svg.line<ICoordinate>()\n            .x(a => x(a.x))\n            .y(a => y(a.y));\n\n        svg.append('g')\n            .attr('class', 'x axis')\n            .attr('transform', 'translate(0,' + this.height + ')')\n            .call(xAxis);\n\n        svg.append('g')\n            .attr('class', 'y axis')\n            .call(yAxis);\n\n        svg.append('path')\n            .datum(data)\n            .attr('class', 'line')\n            .attr('d', line);\n\n        return svg;\n    }\n}\n","l":{"1":1,"3":1,"7":1,"10":1,"12":0,"15":1,"16":0,"18":1,"19":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"33":0,"34":0,"36":0,"37":0,"38":0,"40":0,"45":0,"49":0,"54":0,"56":1}},
"src/LineSpiral.ts":{"path":"src/LineSpiral.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"3":{"start":{"line":15,"column":0},"end":{"line":83,"column":1}},"4":{"start":{"line":15,"column":35},"end":{"line":15,"column":48}},"5":{"start":{"line":22,"column":4},"end":{"line":25,"column":5}},"6":{"start":{"line":18,"column":12},"end":{"line":18,"column":28}},"7":{"start":{"line":19,"column":12},"end":{"line":19,"column":53}},"8":{"start":{"line":20,"column":12},"end":{"line":20,"column":53}},"9":{"start":{"line":27,"column":4},"end":{"line":35,"column":5}},"10":{"start":{"line":28,"column":8},"end":{"line":30,"column":37}},"11":{"start":{"line":32,"column":8},"end":{"line":32,"column":44}},"12":{"start":{"line":33,"column":8},"end":{"line":33,"column":64}},"13":{"start":{"line":33,"column":58},"end":{"line":33,"column":61}},"14":{"start":{"line":34,"column":8},"end":{"line":34,"column":64}},"15":{"start":{"line":34,"column":58},"end":{"line":34,"column":61}},"16":{"start":{"line":37,"column":11},"end":{"line":76,"column":5}},"17":{"start":{"line":37,"column":4},"end":{"line":76,"column":5}},"18":{"start":{"line":38,"column":8},"end":{"line":40,"column":52}},"19":{"start":{"line":42,"column":8},"end":{"line":43,"column":53}},"20":{"start":{"line":45,"column":8},"end":{"line":45,"column":38}},"21":{"start":{"line":47,"column":8},"end":{"line":49,"column":60}},"22":{"start":{"line":49,"column":21},"end":{"line":49,"column":58}},"23":{"start":{"line":51,"column":8},"end":{"line":53,"column":25}},"24":{"start":{"line":52,"column":20},"end":{"line":52,"column":23}},"25":{"start":{"line":53,"column":20},"end":{"line":53,"column":23}},"26":{"start":{"line":57,"column":8},"end":{"line":57,"column":47}},"27":{"start":{"line":58,"column":8},"end":{"line":73,"column":9}},"28":{"start":{"line":59,"column":12},"end":{"line":60,"column":54}},"29":{"start":{"line":61,"column":12},"end":{"line":62,"column":68}},"30":{"start":{"line":62,"column":21},"end":{"line":62,"column":66}},"31":{"start":{"line":63,"column":12},"end":{"line":65,"column":27}},"32":{"start":{"line":64,"column":21},"end":{"line":64,"column":68}},"33":{"start":{"line":67,"column":12},"end":{"line":72,"column":44}},"34":{"start":{"line":75,"column":8},"end":{"line":75,"column":20}},"35":{"start":{"line":78,"column":11},"end":{"line":82,"column":5}},"36":{"start":{"line":79,"column":8},"end":{"line":79,"column":44}},"37":{"start":{"line":80,"column":8},"end":{"line":80,"column":25}},"38":{"start":{"line":81,"column":8},"end":{"line":81,"column":29}},"39":{"start":{"line":83,"column":0},"end":{"line":83,"column":1}},"40":{"start":{"line":15,"column":13},"end":{"line":15,"column":23}}},"fnMap":{"1":{"name":"(anonymous_62)","line":15,"loc":{"start":{"line":15,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"LineSpiral","line":22,"loc":{"start":{"line":22,"column":4},"end":{"line":22,"column":43}}},"3":{"name":"(anonymous_64)","line":27,"loc":{"start":{"line":27,"column":4},"end":{"line":27,"column":29}}},"4":{"name":"(anonymous_65)","line":33,"loc":{"start":{"line":33,"column":53},"end":{"line":33,"column":54}}},"5":{"name":"(anonymous_66)","line":34,"loc":{"start":{"line":34,"column":53},"end":{"line":34,"column":54}}},"6":{"name":"(anonymous_67)","line":37,"loc":{"start":{"line":37,"column":4},"end":{"line":null,"column":-1}}},"7":{"name":"(anonymous_68)","line":49,"loc":{"start":{"line":49,"column":16},"end":{"line":49,"column":17}}},"8":{"name":"(anonymous_69)","line":52,"loc":{"start":{"line":52,"column":15},"end":{"line":52,"column":16}}},"9":{"name":"(anonymous_70)","line":53,"loc":{"start":{"line":53,"column":15},"end":{"line":53,"column":16}}},"10":{"name":"(anonymous_71)","line":62,"loc":{"start":{"line":62,"column":16},"end":{"line":62,"column":17}}},"11":{"name":"(anonymous_72)","line":64,"loc":{"start":{"line":64,"column":16},"end":{"line":64,"column":17}}},"12":{"name":"(anonymous_73)","line":78,"loc":{"start":{"line":78,"column":4},"end":{"line":78,"column":27}}}},"branchMap":{"1":{"line":1,"type":"cond-expr","locations":[{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}}]},"2":{"line":23,"type":"binary-expr","locations":[{"start":{"line":23,"column":8},"end":{"line":23,"column":22}},{"start":{"line":23,"column":22},"end":{"line":25,"column":4}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":1,"40":1},"b":{"1":[1,0],"2":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"code":"import * as d3 from 'd3';\n\nimport { IHistogramOutput } from './basechart';\nimport { Polar }            from './basechart';\nimport { SpiralBase }       from './SpiralBase';\n\n// (used to be in spiral.ts, module Chart)\n\n/**\n * Charts data table as a filled curve on a spiral. We first create a histogram\n * of the data items, then plot the histogram as the thickness of a line (or\n * (filled curve). The number of points in the histogram is currently set by the\n * private member `n_points`.\n */\nexport class LineSpiral<T> extends SpiralBase<T> {\n    private hist_data: IHistogramOutput[];\n    private hist_fn: d3.layout.Histogram<T>;\n    private n_points = 5000;\n    private hist_x = d3.scale.linear().range([0, 1]);\n    private hist_y = d3.scale.linear().range([0, 1]);\n\n    constructor (element: d3.Selection<any>) {\n        super(element);\n        // this.radial_map = d => 1;\n    }\n\n    public set data(data: T[]) {\n        this.hist_fn = d3.layout.histogram<T>()\n            .value(this.radial_map)\n            .bins(this.n_points + 1);\n\n        this.hist_data = this.hist_fn(data);\n        this.hist_x.domain(d3.extent(this.hist_data, a => a.x));\n        this.hist_y.domain(d3.extent(this.hist_data, a => a.y));\n    }\n\n    public render(): d3.Selection<any> {\n        const svg = this.element.append('svg')\n                    .attr('height', this.chartHeight)\n                    .attr('width', this.chartWidth);\n\n        const plot = svg.append('g')\n            .attr('transform', 'translate(400 300)');\n\n        this.render_spiral_axis(plot);\n\n        const polar_data = this.hist_data.slice(1)\n            .map<[Polar, number]>(\n                a => [this.get_polar(a.x + a.dx / 2), a.y]);\n\n        const line = d3.svg.line<Polar>()\n            .x(a => a.x) // * this.radial_scale)\n            .y(a => a.y); // * this.radial_scale);\n\n        // console.log(polar_data);\n        // chop the graph in many pieces\n        const piece_size = this.n_points / 256;\n        for (let i = 0; i < 256; i += 1) {\n            const piece = polar_data.slice(\n                piece_size * i, piece_size * (i + 1));\n            const top_part = piece.map(\n                a => a[0].inc_r(a[1] * (this.period_fraction * 3)));\n            const bottom_part = piece.map(\n                a => a[0].inc_r(- a[1] * (this.period_fraction * 3)))\n                .reverse();\n\n            plot.append('path')\n                .datum(top_part.concat(bottom_part))\n                .attr('class', 'blob')\n                .attr('d', line)\n                .style('fill', 'blue')\n                .style('fill-opacity', 0.7);\n        }\n\n        return plot;\n    }\n\n    public update(data: T[]): d3.Selection<any> {\n        this.element.select('svg').remove();\n        this.data = data;\n        return this.render();\n    }\n}\n","l":{"1":1,"5":1,"15":1,"18":0,"19":0,"20":0,"22":1,"27":1,"28":0,"32":0,"33":0,"34":0,"37":1,"38":0,"42":0,"45":0,"47":0,"49":0,"51":0,"52":0,"53":0,"57":0,"58":0,"59":0,"61":0,"62":0,"63":0,"64":0,"67":0,"75":0,"78":1,"79":0,"80":0,"81":0,"83":1}},
"src/SpiralBase.ts":{"path":"src/SpiralBase.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"2":{"start":{"line":3,"column":0},"end":{"line":3,"column":42}},"3":{"start":{"line":4,"column":0},"end":{"line":4,"column":42}},"4":{"start":{"line":16,"column":0},"end":{"line":152,"column":1}},"5":{"start":{"line":16,"column":35},"end":{"line":16,"column":42}},"6":{"start":{"line":76,"column":4},"end":{"line":79,"column":5}},"7":{"start":{"line":52,"column":11},"end":{"line":52,"column":46}},"8":{"start":{"line":78,"column":8},"end":{"line":78,"column":52}},"9":{"start":{"line":58,"column":12},"end":{"line":61,"column":5}},"10":{"start":{"line":59,"column":8},"end":{"line":60,"column":61}},"11":{"start":{"line":68,"column":11},"end":{"line":74,"column":5}},"12":{"start":{"line":69,"column":8},"end":{"line":73,"column":9}},"13":{"start":{"line":70,"column":12},"end":{"line":70,"column":25}},"14":{"start":{"line":72,"column":12},"end":{"line":72,"column":31}},"15":{"start":{"line":84,"column":11},"end":{"line":86,"column":5}},"16":{"start":{"line":85,"column":8},"end":{"line":85,"column":18}},"17":{"start":{"line":91,"column":11},"end":{"line":94,"column":5}},"18":{"start":{"line":92,"column":8},"end":{"line":93,"column":46}},"19":{"start":{"line":99,"column":11},"end":{"line":121,"column":5}},"20":{"start":{"line":99,"column":4},"end":{"line":121,"column":5}},"21":{"start":{"line":101,"column":8},"end":{"line":102,"column":49}},"22":{"start":{"line":102,"column":23},"end":{"line":102,"column":47}},"23":{"start":{"line":104,"column":8},"end":{"line":105,"column":35}},"24":{"start":{"line":107,"column":8},"end":{"line":110,"column":39}},"25":{"start":{"line":108,"column":22},"end":{"line":108,"column":25}},"26":{"start":{"line":109,"column":22},"end":{"line":109,"column":25}},"27":{"start":{"line":112,"column":8},"end":{"line":118,"column":40}},"28":{"start":{"line":120,"column":8},"end":{"line":120,"column":21}},"29":{"start":{"line":126,"column":11},"end":{"line":151,"column":5}},"30":{"start":{"line":126,"column":4},"end":{"line":151,"column":5}},"31":{"start":{"line":129,"column":8},"end":{"line":129,"column":72}},"32":{"start":{"line":129,"column":34},"end":{"line":129,"column":71}},"33":{"start":{"line":130,"column":8},"end":{"line":130,"column":70}},"34":{"start":{"line":130,"column":32},"end":{"line":130,"column":69}},"35":{"start":{"line":132,"column":8},"end":{"line":132,"column":66}},"36":{"start":{"line":134,"column":8},"end":{"line":135,"column":67}},"37":{"start":{"line":137,"column":8},"end":{"line":141,"column":40}},"38":{"start":{"line":138,"column":31},"end":{"line":138,"column":41}},"39":{"start":{"line":138,"column":61},"end":{"line":138,"column":71}},"40":{"start":{"line":139,"column":31},"end":{"line":139,"column":39}},"41":{"start":{"line":139,"column":59},"end":{"line":139,"column":67}},"42":{"start":{"line":143,"column":8},"end":{"line":148,"column":36}},"43":{"start":{"line":144,"column":30},"end":{"line":144,"column":48}},"44":{"start":{"line":145,"column":30},"end":{"line":145,"column":48}},"45":{"start":{"line":147,"column":28},"end":{"line":147,"column":36}},"46":{"start":{"line":150,"column":8},"end":{"line":150,"column":21}},"47":{"start":{"line":152,"column":0},"end":{"line":152,"column":1}},"48":{"start":{"line":16,"column":13},"end":{"line":16,"column":23}}},"fnMap":{"1":{"name":"(anonymous_78)","line":16,"loc":{"start":{"line":16,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"SpiralBase","line":76,"loc":{"start":{"line":76,"column":4},"end":{"line":76,"column":43}}},"3":{"name":"(anonymous_80)","line":58,"loc":{"start":{"line":58,"column":4},"end":{"line":58,"column":33}}},"4":{"name":"(anonymous_81)","line":68,"loc":{"start":{"line":68,"column":4},"end":{"line":68,"column":38}}},"5":{"name":"(anonymous_82)","line":84,"loc":{"start":{"line":84,"column":4},"end":{"line":84,"column":25}}},"6":{"name":"(anonymous_83)","line":91,"loc":{"start":{"line":91,"column":4},"end":{"line":91,"column":30}}},"7":{"name":"(anonymous_84)","line":99,"loc":{"start":{"line":99,"column":4},"end":{"line":100,"column":35}}},"8":{"name":"(anonymous_85)","line":102,"loc":{"start":{"line":102,"column":16},"end":{"line":102,"column":18}}},"9":{"name":"(anonymous_86)","line":108,"loc":{"start":{"line":108,"column":15},"end":{"line":108,"column":17}}},"10":{"name":"(anonymous_87)","line":109,"loc":{"start":{"line":109,"column":15},"end":{"line":109,"column":17}}},"11":{"name":"(anonymous_88)","line":126,"loc":{"start":{"line":126,"column":4},"end":{"line":128,"column":44}}},"12":{"name":"(anonymous_89)","line":129,"loc":{"start":{"line":129,"column":22},"end":{"line":129,"column":29}}},"13":{"name":"(anonymous_90)","line":130,"loc":{"start":{"line":130,"column":20},"end":{"line":130,"column":27}}},"14":{"name":"(anonymous_91)","line":138,"loc":{"start":{"line":138,"column":24},"end":{"line":138,"column":26}}},"15":{"name":"(anonymous_92)","line":138,"loc":{"start":{"line":138,"column":54},"end":{"line":138,"column":56}}},"16":{"name":"(anonymous_93)","line":139,"loc":{"start":{"line":139,"column":24},"end":{"line":139,"column":26}}},"17":{"name":"(anonymous_94)","line":139,"loc":{"start":{"line":139,"column":52},"end":{"line":139,"column":54}}},"18":{"name":"(anonymous_95)","line":144,"loc":{"start":{"line":144,"column":23},"end":{"line":144,"column":25}}},"19":{"name":"(anonymous_96)","line":145,"loc":{"start":{"line":145,"column":23},"end":{"line":145,"column":25}}},"20":{"name":"(anonymous_97)","line":147,"loc":{"start":{"line":147,"column":18},"end":{"line":147,"column":23}}}},"branchMap":{"1":{"line":1,"type":"cond-expr","locations":[{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}}]},"2":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":8},"end":{"line":77,"column":22}},{"start":{"line":77,"column":22},"end":{"line":79,"column":4}}]},"3":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":7}},{"start":{"line":69,"column":8},"end":{"line":69,"column":7}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":1},"b":{"1":[1,0],"2":[0,0],"3":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"code":"import * as d3 from 'd3';\n\nimport { Base }        from './basechart';\nimport { Polar }       from './basechart';\nimport { ICoordinate } from './basechart';\n\n// (used to be in spiral.ts, module Chart)\n\n/**\n * This is the base class to other charts on a spiral. It gives a low level\n * interface on top of which we can implement several type of spiral charts.\n *\n * Several members have the `_map` suffix. This means that these members are\n * functions that map a data element to some value used in plotting the spiral.\n */\nexport class SpiralBase<T> extends Base<T> {\n    /**\n     * Maps a data element to a number in the range [0, 1]. The returned number\n     * then indicates the place on the spiral that the data element should be\n     * given. Such a map can be created using `d3.scale`, setting the range\n     * to [0, 1] and the domain to the domain of your data.\n     */\n    public radial_map: (x: T) => number;\n\n    /**\n     * A multiplier for the output of `radial_map`. This determines the scale\n     * at which the spiral is being plotted. It defaults to\n     * `this.chartHeight * 0.45`.\n     */\n    public radial_scale: number;\n\n    /**\n     * The fraction of one turn against the entire range. This is one over the\n     * number of windings in the spiral. Suppose you have a spiral mapping a\n     * time range of a few months and want to study periodicity over one day,\n     * then `period_fraction` should be set to one day over the entire time\n     * domain.\n     */\n    public period_fraction: number;\n\n    /**\n     * Get the weight of a data element. This weight will function as indication\n     * of radius in the `BubbleSpiral`, but can also be leveraged as a weight\n     * when generating a histogram for the `LineSpiral` and `ArcSpiral` charts.\n     */\n    public weight_map: (x: T) => number;\n\n    /**\n     * Get the color by which a data element is plotted. This is currently only\n     * used in the `BubbleSpiral`.\n     */\n    public color_map: (x: T) => string = null;\n\n    /**\n     * (private) Computes the angle at which a point is plotted, given the\n     * output of `radial_map`.\n     */\n    private angular_map(x: number) {\n        return SpiralBase.MODULO(x, this.period_fraction) /\n            this.period_fraction * 2 * Math.PI - Math.PI / 2;\n    }\n\n    public line_tics: any;\n\n    /**\n     * Computes `x` modulo `y` correctly, also for negative numbers.\n     */\n    static MODULO(x: number, y: number): number {\n        if (x >= 0) {\n            return x % y;\n        } else {\n            return y - (x % y);\n        }\n    }\n\n    constructor (element: d3.Selection<any>) {\n        super(element);\n        this.radial_scale = this.chartHeight * 0.45;\n    }\n\n    /**\n     * Get a label given a data element; used for labeling tics.\n     */\n    public label_map(_: T): string {\n        return '';\n    }\n\n    /**\n     * Return polar coordinates on the plot given a number in the range [0, 1].\n     */\n    public get_polar(d: number): Polar {\n        return new Polar((d * 0.8 + 0.15) * this.radial_scale,\n                         this.angular_map(d));\n    }\n\n    /**\n     * Render the line on top of which the data points should be plotted.\n     */\n    public render_spiral_axis(\n            plot: d3.Selection<any>) {\n        const pts: ICoordinate[] = d3.range(-1, 1001).map(\n                (i) => this.get_polar(i / 1000));\n\n        const group = plot.append('g')\n            .attr('class', 'axis');\n\n        const line = d3.svg.line<ICoordinate>()\n            .x((d) => d.x)\n            .y((d) => d.y)\n            .interpolate('basis-open');\n\n        group.append('path')\n            .datum(pts)\n            .attr('class', 'line')\n            .attr('d', line)\n            .style('fill', 'none')\n            .style('stroke', '#000')\n            .style('stroke-width', 0.5);\n\n        return group;\n    }\n\n    /**\n     * Draw an axis at a certain angle (radians), with a given label.\n     */\n    public add_axis(\n            selection: d3.Selection<any>,\n            angle: number[], label: string[]) {\n        const start = (a: any) => new Polar(0.2 * this.radial_scale, a);\n        const end = (a: any) => new Polar(1.0 * this.radial_scale, a);\n\n        const group = selection.append('g').attr('class', 'axes');\n\n        const axes = group.selectAll('g.axis')\n            .data(angle).enter().append('g').attr('class', 'axis');\n\n        axes.append('line')\n            .attr('x1', (d) => start(d).x).attr('y1', (d) => start(d).y)\n            .attr('x2', (d) => end(d).x).attr('y2', (d) => end(d).y)\n            .style('stroke', 'black')\n            .style('stroke-width', 0.5);\n\n        axes.append('text')\n            .attr('x', (d) => end(d).inc_r(15).x)\n            .attr('y', (d) => end(d).inc_r(15).y)\n            .attr('text-anchor', 'middle').attr('dy', 5)\n            .text((_, i) => label[i])\n            .style('font-size', 16);\n\n        return group;\n    }\n}\n","l":{"1":1,"3":1,"4":1,"16":1,"52":0,"58":1,"59":0,"68":1,"69":0,"70":0,"72":0,"76":1,"78":0,"84":1,"85":0,"91":1,"92":0,"99":1,"101":0,"102":0,"104":0,"107":0,"108":0,"109":0,"112":0,"120":0,"126":1,"129":0,"130":0,"132":0,"134":0,"137":0,"138":0,"139":0,"143":0,"144":0,"145":0,"147":0,"150":0,"152":1}},
"src/TimedBubbleSpiral.ts":{"path":"src/TimedBubbleSpiral.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":25}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":42}},"3":{"start":{"line":6,"column":0},"end":{"line":54,"column":1}},"4":{"start":{"line":6,"column":42},"end":{"line":6,"column":69}},"5":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"6":{"start":{"line":9,"column":11},"end":{"line":15,"column":6}},"7":{"start":{"line":10,"column":8},"end":{"line":14,"column":9}},"8":{"start":{"line":11,"column":12},"end":{"line":11,"column":27}},"9":{"start":{"line":13,"column":12},"end":{"line":13,"column":25}},"10":{"start":{"line":21,"column":11},"end":{"line":23,"column":6}},"11":{"start":{"line":22,"column":8},"end":{"line":22,"column":39}},"12":{"start":{"line":25,"column":4},"end":{"line":30,"column":5}},"13":{"start":{"line":33,"column":8},"end":{"line":33,"column":28}},"14":{"start":{"line":26,"column":8},"end":{"line":26,"column":25}},"15":{"start":{"line":28,"column":8},"end":{"line":28,"column":47}},"16":{"start":{"line":29,"column":8},"end":{"line":29,"column":66}},"17":{"start":{"line":36,"column":4},"end":{"line":40,"column":5}},"18":{"start":{"line":37,"column":8},"end":{"line":37,"column":47}},"19":{"start":{"line":38,"column":8},"end":{"line":38,"column":50}},"20":{"start":{"line":39,"column":8},"end":{"line":39,"column":51}},"21":{"start":{"line":42,"column":11},"end":{"line":44,"column":5}},"22":{"start":{"line":43,"column":8},"end":{"line":43,"column":37}},"23":{"start":{"line":46,"column":11},"end":{"line":53,"column":5}},"24":{"start":{"line":47,"column":8},"end":{"line":47,"column":36}},"25":{"start":{"line":48,"column":8},"end":{"line":51,"column":63}},"26":{"start":{"line":50,"column":36},"end":{"line":50,"column":65}},"27":{"start":{"line":51,"column":36},"end":{"line":51,"column":60}},"28":{"start":{"line":52,"column":8},"end":{"line":52,"column":20}},"29":{"start":{"line":54,"column":0},"end":{"line":54,"column":1}},"30":{"start":{"line":6,"column":13},"end":{"line":6,"column":30}}},"fnMap":{"1":{"name":"(anonymous_102)","line":6,"loc":{"start":{"line":6,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"TimedBubbleSpiral","line":17,"loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":43}}},"3":{"name":"(anonymous_104)","line":9,"loc":{"start":{"line":9,"column":23},"end":{"line":9,"column":42}}},"4":{"name":"(anonymous_105)","line":21,"loc":{"start":{"line":21,"column":24},"end":{"line":21,"column":43}}},"5":{"name":"(anonymous_106)","line":32,"loc":{"start":{"line":32,"column":4},"end":{"line":null,"column":-1}}},"6":{"name":"(anonymous_107)","line":25,"loc":{"start":{"line":25,"column":4},"end":{"line":25,"column":34}}},"7":{"name":"(anonymous_108)","line":36,"loc":{"start":{"line":36,"column":4},"end":{"line":36,"column":32}}},"8":{"name":"(anonymous_109)","line":42,"loc":{"start":{"line":42,"column":4},"end":{"line":42,"column":39}}},"9":{"name":"(anonymous_110)","line":46,"loc":{"start":{"line":46,"column":4},"end":{"line":null,"column":-1}}},"10":{"name":"(anonymous_111)","line":50,"loc":{"start":{"line":50,"column":29},"end":{"line":50,"column":31}}},"11":{"name":"(anonymous_112)","line":51,"loc":{"start":{"line":51,"column":29},"end":{"line":51,"column":31}}}},"branchMap":{"1":{"line":1,"type":"cond-expr","locations":[{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}},{"start":{"line":1,"column":25},"end":{"line":null,"column":-1}}]},"2":{"line":18,"type":"binary-expr","locations":[{"start":{"line":18,"column":8},"end":{"line":18,"column":22}},{"start":{"line":18,"column":22},"end":{"line":19,"column":4}}]},"3":{"line":10,"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":10,"column":7}},{"start":{"line":10,"column":8},"end":{"line":10,"column":7}}]}},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":1,"18":0,"19":0,"20":0,"21":1,"22":0,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":1,"30":1},"b":{"1":[1,0],"2":[0,0],"3":[0,0]},"f":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"code":"import * as d3 from 'd3';\n\nimport { ITimedRecord } from './ITimedRecord';\nimport { LineSpiral } from './LineSpiral';\n\nexport class TimedBubbleSpiral<T> extends LineSpiral<ITimedRecord<T>> {\n    private _period: d3.time.Interval;\n    public time_scale: d3.time.Scale<number, number>;\n    public color_map = (d: ITimedRecord<T>) => {\n        if (d.color) {\n            return d.color;\n        } else {\n            return 'red';\n        }\n    };\n\n    constructor (element: d3.Selection<any>) {\n        super(element);\n    }\n\n    public radial_map = (x: ITimedRecord<T>) => {\n        return this.time_scale(x.date);\n    };\n\n    set period(p: d3.time.Interval) {\n        this._period = p;\n\n        const zero = this.time_scale.invert(0);\n        this.period_fraction = this.time_scale(p.offset(zero, 1));\n    }\n\n    get period(): d3.time.Interval {\n        return this._period;\n    }\n\n    set period_seconds(p: number) {\n        const zero = this.time_scale.invert(0);\n        const iv = d3.time.second.offset(zero, p);\n        this.period_fraction = this.time_scale(iv);\n    }\n\n    public label_map(d: ITimedRecord<T>): string {\n        return d.date.toDateString();\n    }\n\n    public render(): d3.Selection<any> {\n        const plot = super.render();\n        this.add_axis(\n            plot,\n            d3.range(16).map((i) => i / 8 * Math.PI - Math.PI / 2),\n            d3.range(16).map((i) => (i / 8).toString() + 'π'));\n        return plot;\n    }\n}\n","l":{"1":1,"4":1,"6":1,"9":0,"10":0,"11":0,"13":0,"17":1,"21":0,"22":0,"25":1,"26":0,"28":0,"29":0,"33":0,"36":1,"37":0,"38":0,"39":0,"42":1,"43":0,"46":1,"47":0,"48":0,"50":0,"51":0,"52":0,"54":1}},
"src/basechart.ts":{"path":"src/basechart.ts","statementMap":{"1":{"start":{"line":8,"column":0},"end":{"line":16,"column":1}},"2":{"start":{"line":12,"column":4},"end":{"line":15,"column":5}},"3":{"start":{"line":13,"column":8},"end":{"line":13,"column":19}},"4":{"start":{"line":14,"column":8},"end":{"line":14,"column":19}},"5":{"start":{"line":16,"column":0},"end":{"line":16,"column":1}},"6":{"start":{"line":8,"column":13},"end":{"line":8,"column":22}},"7":{"start":{"line":18,"column":0},"end":{"line":33,"column":1}},"8":{"start":{"line":22,"column":4},"end":{"line":25,"column":5}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":19}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":23}},"11":{"start":{"line":27,"column":4},"end":{"line":27,"column":51}},"12":{"start":{"line":27,"column":14},"end":{"line":27,"column":49}},"13":{"start":{"line":28,"column":4},"end":{"line":28,"column":51}},"14":{"start":{"line":28,"column":14},"end":{"line":28,"column":49}},"15":{"start":{"line":30,"column":11},"end":{"line":32,"column":5}},"16":{"start":{"line":31,"column":8},"end":{"line":31,"column":48}},"17":{"start":{"line":33,"column":0},"end":{"line":33,"column":1}},"18":{"start":{"line":18,"column":13},"end":{"line":18,"column":18}},"19":{"start":{"line":48,"column":0},"end":{"line":65,"column":1}},"20":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"21":{"start":{"line":49,"column":11},"end":{"line":49,"column":28}},"22":{"start":{"line":50,"column":11},"end":{"line":50,"column":29}},"23":{"start":{"line":59,"column":8},"end":{"line":59,"column":31}},"24":{"start":{"line":62,"column":11},"end":{"line":64,"column":5}},"25":{"start":{"line":63,"column":8},"end":{"line":63,"column":20}},"26":{"start":{"line":65,"column":0},"end":{"line":65,"column":1}},"27":{"start":{"line":48,"column":22},"end":{"line":48,"column":26}}},"fnMap":{"1":{"name":"(anonymous_114)","line":8,"loc":{"start":{"line":8,"column":0},"end":{"line":null,"column":-1}}},"2":{"name":"Cartesian","line":12,"loc":{"start":{"line":12,"column":4},"end":{"line":12,"column":36}}},"3":{"name":"(anonymous_116)","line":18,"loc":{"start":{"line":18,"column":0},"end":{"line":null,"column":-1}}},"4":{"name":"Polar","line":22,"loc":{"start":{"line":22,"column":4},"end":{"line":22,"column":39}}},"5":{"name":"(anonymous_118)","line":27,"loc":{"start":{"line":27,"column":4},"end":{"line":27,"column":13}}},"6":{"name":"(anonymous_119)","line":28,"loc":{"start":{"line":28,"column":4},"end":{"line":28,"column":13}}},"7":{"name":"(anonymous_120)","line":30,"loc":{"start":{"line":30,"column":4},"end":{"line":30,"column":27}}},"8":{"name":"(anonymous_121)","line":48,"loc":{"start":{"line":48,"column":0},"end":{"line":null,"column":-1}}},"9":{"name":"Base","line":58,"loc":{"start":{"line":58,"column":4},"end":{"line":58,"column":43}}},"10":{"name":"(anonymous_123)","line":62,"loc":{"start":{"line":62,"column":4},"end":{"line":62,"column":24}}}},"branchMap":{},"s":{"1":1,"2":1,"3":0,"4":0,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":1,"12":0,"13":1,"14":0,"15":1,"16":0,"17":1,"18":1,"19":1,"20":1,"21":0,"22":0,"23":0,"24":1,"25":0,"26":1,"27":1},"b":{},"f":{"1":1,"2":0,"3":1,"4":0,"5":0,"6":0,"7":0,"8":1,"9":0,"10":0},"code":"import * as d3 from 'd3';\n\nexport interface ICoordinate {\n    x: number;\n    y: number;\n}\n\nexport class Cartesian implements ICoordinate {\n    public x: number;\n    public y: number;\n\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nexport class Polar implements ICoordinate {\n    public r: number;\n    public phi: number;\n\n    constructor (r: number, phi: number) {\n        this.r = r;\n        this.phi = phi;\n    }\n\n    get x() { return this.r * Math.cos(this.phi); }\n    get y() { return this.r * Math.sin(this.phi); }\n\n    public inc_r(dr: number): Polar {\n        return new Polar(this.r + dr, this.phi);\n    }\n}\n\nexport interface IMargin {\n    top: number;\n    right: number;\n    bottom: number;\n    left: number;\n}\n\nexport interface IHistogramOutput {\n    x: number;\n    dx: number;\n    y: number;\n}\n\nexport abstract class Base<T> {\n    public chartWidth = 800;\n    public chartHeight = 600;\n\n    /**\n     * Refers to the `d3.Selection` containing the element that is being\n     * drawn to.\n     */\n    public element: d3.Selection<any>;\n\n    constructor (element: d3.Selection<any>) {\n        this.element = element;\n    }\n\n    public render(_: T[]): d3.Selection<any> {\n        return null;\n    }\n}\n","l":{"8":1,"12":1,"13":0,"14":0,"16":1,"18":1,"22":1,"23":0,"24":0,"27":1,"28":1,"30":1,"31":0,"33":1,"48":1,"49":0,"50":0,"58":1,"59":0,"62":1,"63":0,"65":1}},
"src/fourier.ts":{"path":"src/fourier.ts","statementMap":{"1":{"start":{"line":14,"column":0},"end":{"line":14,"column":36}},"2":{"start":{"line":24,"column":0},"end":{"line":53,"column":1}},"3":{"start":{"line":25,"column":4},"end":{"line":25,"column":31}},"4":{"start":{"line":27,"column":4},"end":{"line":27,"column":35}},"5":{"start":{"line":27,"column":19},"end":{"line":27,"column":33}},"6":{"start":{"line":29,"column":4},"end":{"line":29,"column":83}},"7":{"start":{"line":29,"column":23},"end":{"line":29,"column":81}},"8":{"start":{"line":31,"column":4},"end":{"line":31,"column":28}},"9":{"start":{"line":32,"column":4},"end":{"line":32,"column":21}},"10":{"start":{"line":33,"column":4},"end":{"line":35,"column":5}},"11":{"start":{"line":34,"column":8},"end":{"line":34,"column":24}},"12":{"start":{"line":36,"column":4},"end":{"line":36,"column":21}},"13":{"start":{"line":38,"column":4},"end":{"line":40,"column":5}},"14":{"start":{"line":39,"column":8},"end":{"line":39,"column":28}},"15":{"start":{"line":41,"column":4},"end":{"line":41,"column":21}},"16":{"start":{"line":43,"column":4},"end":{"line":43,"column":28}},"17":{"start":{"line":44,"column":4},"end":{"line":44,"column":17}},"18":{"start":{"line":45,"column":4},"end":{"line":50,"column":5}},"19":{"start":{"line":46,"column":8},"end":{"line":46,"column":54}},"20":{"start":{"line":47,"column":8},"end":{"line":47,"column":34}},"21":{"start":{"line":48,"column":8},"end":{"line":48,"column":37}},"22":{"start":{"line":49,"column":8},"end":{"line":49,"column":38}},"23":{"start":{"line":52,"column":4},"end":{"line":52,"column":13}},"24":{"start":{"line":61,"column":0},"end":{"line":64,"column":1}},"25":{"start":{"line":62,"column":4},"end":{"line":62,"column":43}},"26":{"start":{"line":62,"column":29},"end":{"line":62,"column":40}},"27":{"start":{"line":63,"column":4},"end":{"line":63,"column":62}},"28":{"start":{"line":63,"column":22},"end":{"line":63,"column":60}}},"fnMap":{"1":{"name":"fft","line":24,"loc":{"start":{"line":24,"column":0},"end":{"line":24,"column":32}}},"2":{"name":"ifft","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":33}}},"3":{"name":"(anonymous_127)","line":62,"loc":{"start":{"line":62,"column":24},"end":{"line":62,"column":25}}},"4":{"name":"(anonymous_128)","line":63,"loc":{"start":{"line":63,"column":17},"end":{"line":63,"column":18}}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":27,"column":3}},{"start":{"line":27,"column":4},"end":{"line":27,"column":3}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":3}},{"start":{"line":29,"column":4},"end":{"line":29,"column":3}}]}},"s":{"1":1,"2":2,"3":1533,"4":1533,"5":768,"6":765,"7":0,"8":765,"9":765,"10":765,"11":3072,"12":765,"13":765,"14":3072,"15":765,"16":765,"17":765,"18":765,"19":3072,"20":3072,"21":3072,"22":3072,"23":765,"24":2,"25":1,"26":256,"27":1,"28":256},"b":{"1":[768,765],"2":[0,765]},"f":{"1":1533,"2":1,"3":256,"4":256},"code":"/** The RFFT or Rather Fast Fourier Transform.\n *\n * This module has the forward as well as inverse transform. See\n * https://en.wikipedia.org/wiki/Discrete_Fourier_transform for more information\n * on the discrete Fourier transform.\n * To answer the question on everyone's mind: the inverse transform is\n * normalised such that it returns the original series (barring round-off\n * errors).\n */\n\n/**\n * class Complex\n */\nimport { Complex } from './Complex';\n\n/**\n * Forward Fourier transform (1d). This uses the Cooley–Tukey algorithm\n * in a recursive fashion. This is not an optimal implementation, but it\n * is fast enough for our purposes.\n *\n * @param s list of complex numbers.\n * @returns discrete Fourier sum of the series.\n */\nexport function fft(s: Complex[]): Complex[] {\n    const N: number = s.length;\n\n    if (N === 1) { return [s[0]]; }\n\n    if (N % 2 !== 0) { throw new Error('FFT: Size of array must be power of 2.'); }\n\n    const r: Complex[] = [];\n    r.length = N / 2;\n    for (let j = 0; j < N / 2; j += 1) {\n        r[j] = s[j * 2];\n    }\n    const p = fft(r);\n\n    for (let j = 0; j < N / 2; j += 1) {\n        r[j] = s[j * 2 + 1];\n    }\n    const q = fft(r);\n\n    const y: Complex[] = [];\n    y.length = N;\n    for (let k = 0; k < N / 2; k += 1) {\n        const wk = Complex.EXPI(-2 * k * Math.PI / N);\n        const qk = wk.times(q[k]);\n        y[k]         = p[k].plus(qk);\n        y[k + N / 2] = p[k].minus(qk);\n    }\n\n    return y;\n}\n\n/**\n * Inverse Fourier transform\n *\n * @param s list of complex numbers\n * @returns the inverse discrete Fourier sum of the series.\n */\nexport function ifft(s: Complex[]): Complex[] {\n    const y = fft(s.map(z => z.conjugate));\n    return y.map(z => z.conjugate.times_real(1.0 / s.length));\n}\n","l":{"14":1,"24":2,"25":1533,"27":1533,"29":765,"31":765,"32":765,"33":765,"34":3072,"36":765,"38":765,"39":3072,"41":765,"43":765,"44":765,"45":765,"46":3072,"47":3072,"48":3072,"49":3072,"52":765,"61":2,"62":256,"63":256}},
"src/index.ts":{"path":"src/index.ts","statementMap":{"1":{"start":{"line":1,"column":0},"end":{"line":1,"column":48}},"2":{"start":{"line":1,"column":9},"end":{"line":1,"column":18}},"3":{"start":{"line":2,"column":0},"end":{"line":2,"column":46}},"4":{"start":{"line":2,"column":9},"end":{"line":2,"column":16}},"5":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"6":{"start":{"line":3,"column":9},"end":{"line":3,"column":12}},"7":{"start":{"line":3,"column":14},"end":{"line":3,"column":18}},"8":{"start":{"line":4,"column":0},"end":{"line":4,"column":51}},"9":{"start":{"line":4,"column":9},"end":{"line":4,"column":21}},"10":{"start":{"line":5,"column":0},"end":{"line":5,"column":48}},"11":{"start":{"line":5,"column":9},"end":{"line":5,"column":18}},"12":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"13":{"start":{"line":6,"column":9},"end":{"line":6,"column":19}},"14":{"start":{"line":7,"column":0},"end":{"line":7,"column":49}},"15":{"start":{"line":7,"column":9},"end":{"line":7,"column":19}},"16":{"start":{"line":8,"column":0},"end":{"line":8,"column":56}},"17":{"start":{"line":8,"column":9},"end":{"line":8,"column":26}}},"fnMap":{},"branchMap":{},"s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1},"b":{},"f":{},"code":"export { ArcSpiral }         from './ArcSpiral';\nexport { Complex }           from './Complex';\nexport { fft, ifft }         from './fourier';\nexport { BubbleSpiral }      from './BubbleSpiral';\nexport { LineChart }         from './LineChart';\nexport { LineSpiral }        from './LineSpiral';\nexport { SpiralBase }        from './SpiralBase';\nexport { TimedBubbleSpiral } from './TimedBubbleSpiral';\n","l":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1}}}
